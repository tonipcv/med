generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String           @id @default(cuid())
  name                   String
  slug                   String           @unique
  specialty              String?
  email                  String           @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime         @default(now())
  plan                   String?
  planExpiresAt          DateTime?
  pageTemplate           String           @default("default")
  isPremium              Boolean          @default(false)
  premiumSince           DateTime?
  planStatus             String?          @default("inactive")
  planUpdatedAt          DateTime?
  accounts               Account[]
  events                 Event[]
  indications            Indication[]
  interestOptions        InterestOption[]
  leads                  Lead[]
  patients               Patient[]
  paymentLinks           PaymentLink[]
  sessions               Session[]
  pages                  Page[]
  pipelines              Pipeline[]
  services               Service[]
}

model Indication {
  id        String   @id @default(cuid())
  slug      String
  name      String?
  userId    String
  createdAt DateTime @default(now())
  fullLink  String?
  patientId String?
  type      String   @default("regular")
  events    Event[]
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user      User     @relation(fields: [userId], references: [id])
  leads     Lead[]
}

model Lead {
  id              String      @id @default(cuid())
  name            String
  phone           String
  interest        String?
  userId          String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  status          String?     @default("Novo")
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  pipelineId      String?
  email           String?
  serviceId       String?
  user            User        @relation(fields: [userId], references: [id])
  indication      Indication? @relation(fields: [indicationId], references: [id])
  pipeline        Pipeline?   @relation(fields: [pipelineId], references: [id])
  patient         Patient?
  service         Service?    @relation(fields: [serviceId], references: [id])

  @@index([pipelineId])
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  indicationId String?
  type         String
  ip           String?
  userAgent    String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?
  createdAt    DateTime    @default(now())
  indication   Indication? @relation(fields: [indicationId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeadForm {
  id            String    @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String    @default("Novo")
  notes         String?
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InsideSalesLead {
  id            String   @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String   @default("new")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model InterestOption {
  id          String   @id @default(cuid())
  label       String
  value       String
  redirectUrl String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, value])
}

model Patient {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  phone             String
  userId            String?
  leadId            String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  accessToken       String?
  accessTokenExpiry DateTime?
  hasPassword       Boolean           @default(false)
  password          String?
  firstAccess       Boolean           @default(true)
  hasPortalAccess   Boolean           @default(false)
  welcomeEmailSent  Boolean           @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  hasActiveProducts Boolean           @default(false)
  indications       Indication[]
  referrals         PatientReferral[]
  lead              Lead?             @relation(fields: [leadId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
}

model PaymentLink {
  id            String    @id @default(cuid())
  userId        String
  planId        String
  externalId    String    @unique
  paymentUrl    String
  status        String
  transactionId String?
  createdAt     DateTime  @default(now())
  paidAt        DateTime?
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Page {
  id           String            @id @default(cuid())
  userId       String
  slug         String            @unique
  title        String
  subtitle     String?
  avatarUrl    String?
  address      String?           // Mantido para compatibilidade com versão anterior
  primaryColor String            @default("#0070df")
  layout       String            @default("classic")
  formId       String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  isModal      Boolean           @default(false)
  serviceId    String?
  blocks       PageBlock[]
  socialLinks  SocialLink[]
  addresses    PageAddress[]     // Relação com o novo modelo de endereços
  user         User              @relation(fields: [userId], references: [id])
  referrals    PatientReferral[]
  rewards      ReferralReward[]
  service      Service?          @relation(fields: [serviceId], references: [id])

  @@index([userId])
}

model PageAddress {
  id        String   @id @default(cuid())
  pageId    String
  name      String   // Nome do local (ex: "Consultório Principal", "Filial Centro")
  address   String   // Endereço completo
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model PageBlock {
  id      String @id @default(cuid())
  pageId  String
  type    String
  content Json
  order   Int
  page    Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model SocialLink {
  id       String @id @default(cuid())
  pageId   String
  platform String
  username String
  url      String
  page     Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model Pipeline {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  userId      String
  columns     Json     @default("[{\"id\": \"novos\", \"title\": \"Novos\"}, {\"id\": \"agendados\", \"title\": \"Agendados\"}, {\"id\": \"compareceram\", \"title\": \"Compareceram\"}, {\"id\": \"fechados\", \"title\": \"Fechados\"}, {\"id\": \"naoVieram\", \"title\": \"Não vieram\"}]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  leads       Lead[]

  @@index([userId])
}

model PatientReferral {
  id        String           @id @default(cuid())
  slug      String           @unique
  pageId    String
  patientId String
  visits    Int              @default(0)
  leads     Int              @default(0)
  sales     Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  page      Page             @relation(fields: [pageId], references: [id])
  patient   Patient          @relation(fields: [patientId], references: [id])
  rewards   ReferralReward[]

  @@index([pageId])
  @@index([patientId])
}

model ReferralReward {
  id          String          @id @default(cuid())
  referralId  String
  type        RewardType
  title       String
  description String?
  unlockValue Int
  unlockType  String
  pageId      String?
  textContent String?
  unlockedAt  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  serviceId   String?
  referral    PatientReferral @relation(fields: [referralId], references: [id])
  page        Page?           @relation(fields: [pageId], references: [id])
  service     Service?        @relation(fields: [serviceId], references: [id])

  @@index([referralId])
  @@index([pageId])
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  leads       Lead[]
  rewards     ReferralReward[]
  pageForms   Page[]

  @@index([userId])
}

enum RewardType {
  PAGE
  TEXT
}

enum reward_type {
  PAGE
  TEXT
}
