generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Conversation {
  id        String   @id
  sessionId String   @unique
  doctorId  String
  patientId String?
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([doctorId])
  @@index([patientId])
}

model Event {
  id           String   @id @default(cuid())
  userId       String
  indicationId String?
  type         String
  ip           String?
  userAgent    String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?
  createdAt    DateTime @default(now())
  indication   Indication? @relation(fields: [indicationId], references: [id])
}

model Form {
  id          String   @id
  name        String
  description String?
  createdBy   String
  isPublic    Boolean  @default(false)
  category    String?
  fields      Json[]
  settings    Json
  style       Json
  stats       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String

  @@index([createdBy])
}

model FormBlock {
  id      String @id
  formId  String
  type    String
  content Json
  order   Int    @default(0)

  @@index([formId])
}

model FormSubmission {
  id        String   @id
  formId    String
  data      Json
  metadata  Json
  createdAt DateTime @default(now())

  @@index([formId])
}

model Indication {
  id        String   @id
  slug      String
  name      String?
  userId    String
  createdAt DateTime @default(now())
  fullLink  String?
  patientId String?
  type      String   @default("regular")
  leads     leads[]
  user      User     @relation(fields: [userId], references: [id])
  events    Event[]
}

model InsideSalesLead {
  id            String   @id
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String   @default("new")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model InterestOption {
  id          String   @id
  label       String
  value       String
  redirectUrl String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([userId, value])
}

model LeadForm {
  id            String    @id
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String    @default("Novo")
  notes         String?
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
}

model Message {
  id             String   @id
  conversationId String
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([conversationId])
}

model Page {
  id           String   @id
  userId       String
  slug         String   @unique
  title        String
  subtitle     String?
  avatarUrl    String?
  primaryColor String   @default("#0070df")
  layout       String   @default("classic")
  formId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  isModal      Boolean  @default(false)
  serviceId    String?
  address      String?
  blocks       PageBlock[]
  socialLinks  SocialLink[]
  user         User     @relation(fields: [userId], references: [id])
  referrals    PatientReferral[]

  @@index([userId])
}

model PageAddress {
  id        String   @id
  pageId    String
  name      String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([pageId])
}

model PageBlock {
  id      String @id
  pageId  String
  type    String
  content Json
  order   Int    @default(0)
  page    Page   @relation(fields: [pageId], references: [id])

  @@index([pageId])
}

model Patient {
  id                String    @id
  name              String
  email             String    @unique
  phone             String
  userId            String?
  leadId            String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  accessToken       String?
  accessTokenExpiry DateTime?
  hasPassword       Boolean   @default(false)
  password          String?
  firstAccess       Boolean   @default(true)
  hasPortalAccess   Boolean   @default(false)
  welcomeEmailSent  Boolean   @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  hasActiveProducts Boolean   @default(false)
  referrals         PatientReferral[]
}

model PatientReferral {
  id        String   @id
  slug      String   @unique
  pageId    String
  patientId String
  visits    Int      @default(0)
  leads     Int      @default(0)
  sales     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  patient   Patient  @relation(fields: [patientId], references: [id])
  page      Page     @relation(fields: [pageId], references: [id])
  rewards   ReferralReward[]

  @@index([pageId])
  @@index([patientId])
}

model PaymentLink {
  id            String    @id
  userId        String
  planId        String
  externalId    String    @unique
  paymentUrl    String
  status        String
  transactionId String?
  createdAt     DateTime  @default(now())
  paidAt        DateTime?

  @@index([userId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ReferralReward {
  id          String         @id
  referralId  String
  type        RewardType
  title       String
  description String?
  unlockValue Int
  unlockType  String
  pageId      String?
  textContent String?
  unlockedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  serviceId   String?
  referral    PatientReferral @relation(fields: [referralId], references: [id])

  @@index([pageId])
  @@index([referralId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model SocialLink {
  id       String @id
  pageId   String
  platform String
  username String
  url      String
  page     Page   @relation(fields: [pageId], references: [id])

  @@index([pageId])
}

model User {
  id                     String    @id @default(cuid())
  name                   String
  slug                   String    @unique
  specialty              String?
  email                  String    @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime  @default(now())
  plan                   String?
  planExpiresAt          DateTime?
  pageTemplate           String    @default("default")
  isPremium              Boolean   @default(false)
  premiumSince           DateTime?
  planStatus             String?   @default("inactive")
  planUpdatedAt          DateTime?
  leads                  leads[]
  indications           Indication[]
  pages                 Page[]
  pipelines            pipelines[]

  @@index([email], map: "user_email_idx")
  @@index([slug], map: "user_slug_idx")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model leads {
  id              String    @id
  name            String
  email           String?
  phone           String
  status          String    @default("Novo")
  pipelineId      String?
  user_id         String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  serviceId       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  indication      Indication? @relation(fields: [indicationId], references: [id])
  user            User       @relation(fields: [user_id], references: [id])
  pipeline        pipelines? @relation(fields: [pipelineId], references: [id])

  @@index([createdAt])
  @@index([indicationId])
  @@index([pipelineId])
  @@index([status])
  @@index([user_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model leads_backup_clean {
  id              String?
  name            String?
  email           String?
  phone           String?
  status          String?
  pipelineId      String?
  user_id         String?
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  serviceId       String?
  createdAt       DateTime?
  updatedAt       DateTime?

  @@ignore
}

model leads_old_final {
  id              String    @id(map: "leads_new_pkey")
  name            String
  email           String?
  phone           String
  status          String    @default("Novo")
  pipelineId      String?
  user_id         String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  serviceId       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  @@index([createdAt], map: "leads_new_createdAt_idx")
  @@index([indicationId], map: "leads_new_indicationId_idx")
  @@index([pipelineId], map: "leads_new_pipelineId_idx")
  @@index([status], map: "leads_new_status_idx")
  @@index([user_id], map: "leads_new_user_id_idx")
}

model pipelines {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  user_id     String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  columns     Json?    @default("[{\"id\": \"novos\", \"title\": \"Novos\"}, {\"id\": \"agendados\", \"title\": \"Agendados\"}, {\"id\": \"compareceram\", \"title\": \"Compareceram\"}, {\"id\": \"fechados\", \"title\": \"Fechados\"}, {\"id\": \"naoVieram\", \"title\": \"Não vieram\"}]")
  user        User     @relation(fields: [user_id], references: [id])
  leads       leads[]

  @@index([user_id], map: "pipeline_user_id_idx")
}

model services {
  id          String   @id
  name        String
  description String?
  price       Float?
  category    String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String

  @@index([user_id], map: "service_user_id_idx")
}

enum RewardType {
  PAGE
  TEXT
}

enum reward_type {
  PAGE
  TEXT
}
