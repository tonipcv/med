// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  name                   String
  slug                   String          @unique
  specialty              String?
  email                  String          @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime        @default(now())
  plan                   String          @default("free") // Pode ser "free" ou "premium"
  planExpiresAt          DateTime?       // Data de expiração do plano premium
  
  // Relações existentes
  accounts               Account[]
  checkpoints            Checkpoint[]
  circles                Circle[]
  cycles                 Cycle[]
  habits                 Habit[]
  sessions               Session[]
  thoughts               Thought[]
  eisenhowerTasks        EisenhowerTask[]
  pomodoroStars          PomodoroStar[]
  
  // Novas relações
  indications            Indication[]
  leads                  Lead[]
  events                 Event[]
}

model Indication {
  id        String   @id @default(cuid())
  slug      String
  name      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  leads     Lead[]
  events    Event[]
}

model Lead {
  id              String      @id @default(cuid())
  name            String
  phone           String
  interest        String?
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  indicationId    String?
  indication      Indication? @relation(fields: [indicationId], references: [id])
  source          String?     // Campo mantido para compatibilidade
  utmSource       String?     // Ex: instagram, google, facebook
  utmMedium       String?     // Ex: bio, cpc, email, banner
  utmCampaign     String?     // Ex: promoabril, blackfriday
  utmTerm         String?     // Termos de busca pagos
  utmContent      String?     // Para diferenciar anúncios ou links
  status          String?     @default("Novo") // Novo, Em contato, Agendado, Compareceu, Não veio, Fechado
  potentialValue  Float?      // Valor potencial ou ticket previsto
  appointmentDate DateTime?   // Data/hora da consulta marcada
  medicalNotes    String?     // Prontuário ou anotações médicas
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt @default(now())
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  indicationId String?
  indication   Indication? @relation(fields: [indicationId], references: [id])
  type         String      // "click" | "lead"
  ip           String?
  userAgent    String?
  utmSource    String?     // Ex: instagram, google, facebook
  utmMedium    String?     // Ex: bio, cpc, email, banner
  utmCampaign  String?     // Ex: promoabril, blackfriday
  utmTerm      String?     // Termos de busca pagos
  utmContent   String?     // Para diferenciar anúncios ou links
  createdAt    DateTime    @default(now())
}

model Cycle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  weeks     Week[]
}

model Week {
  id         String      @id @default(cuid())
  cycleId    String
  cycle      Cycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime    @default(now())
  goals      Goal[]
  keyResults KeyResult[]
  days       Day[]
}

model Goal {
  id          String   @id @default(cuid())
  weekId      String
  week        Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model KeyResult {
  id          String   @id @default(cuid())
  weekId      String
  week        Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Day {
  id        String   @id @default(cuid())
  weekId    String
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  date      DateTime
  createdAt DateTime @default(now())
  tasks     Task[]

  @@unique([weekId, date])
}

model Task {
  id            String   @id @default(cuid())
  title         String
  completed     Boolean  @default(false)
  timeBlock     String
  scheduledTime String?
  dayId         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  day           Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model EisenhowerTask {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  urgent      Boolean  @default(false)
  important   Boolean  @default(false)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Habit {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  frequency   String
  completed   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  progress    DayProgress[]
}

model DayProgress {
  id        String   @id @default(cuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([habitId, date])
}

model Circle {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Checkpoint {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
}

model Thought {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  createdAt   DateTime @default(now())
}

model PomodoroStar {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  createdAt DateTime @default(now())
}
