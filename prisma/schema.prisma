generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  name                   String
  slug                   String           @unique
  specialty              String?
  email                  String           @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime         @default(now())
  plan                   String?
  planStatus             String?         @default("inactive")
  planUpdatedAt          DateTime?
  planExpiresAt          DateTime?
  pageTemplate           String           @default("default")
  accounts               Account[]
  chatbotFlows           ChatbotFlow[]
  events                 Event[]
  indications            Indication[]
  interestOptions        InterestOption[]
  leads                  Lead[]
  patients               Patient[]
  quizzes                Quiz[]
  sessions               Session[]
  paymentLinks           PaymentLink[]
  isPremium              Boolean          @default(false)
  premiumSince           DateTime?
}

model Indication {
  id            String        @id @default(cuid())
  slug          String
  name          String?
  userId        String
  createdAt     DateTime      @default(now())
  fullLink      String?
  patientId     String?
  type          String        @default("regular")
  chatbotConfig Json?
  chatbotFlowId String?
  quizId        String?
  chatMessages  ChatMessage[]
  events        Event[]
  chatbotFlow   ChatbotFlow?  @relation(fields: [chatbotFlowId], references: [id])
  patient       Patient?      @relation(fields: [patientId], references: [id])
  quiz          Quiz?         @relation(fields: [quizId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  leads         Lead[]
}

model Lead {
  id              String      @id @default(cuid())
  name            String
  phone           String
  interest        String?
  userId          String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  status          String?     @default("Novo")
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  indication      Indication? @relation(fields: [indicationId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  patient         Patient?
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  indicationId String?
  type         String
  ip           String?
  userAgent    String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?
  createdAt    DateTime    @default(now())
  indication   Indication? @relation(fields: [indicationId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeadForm {
  id            String    @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String    @default("Novo")
  notes         String?
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InsideSalesLead {
  id            String   @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String   @default("new")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model InterestOption {
  id          String   @id @default(cuid())
  label       String
  value       String
  redirectUrl String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, value])
}

model Patient {
  id                String       @id @default(cuid())
  name              String
  email             String
  phone             String
  userId            String
  leadId            String?      @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  accessToken       String?
  accessTokenExpiry DateTime?
  hasPassword       Boolean      @default(false)
  password          String?
  firstAccess       Boolean      @default(true)
  hasPortalAccess   Boolean      @default(false)
  welcomeEmailSent  Boolean      @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  indications       Indication[]
  lead              Lead?        @relation(fields: [leadId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id           String     @id @default(cuid())
  indicationId String
  content      String
  sender       String
  createdAt    DateTime   @default(now())
  metadata     Json?
  indication   Indication @relation(fields: [indicationId], references: [id], onDelete: Cascade)

  @@index([indicationId])
}

model ChatbotFlow {
  id          String        @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isPublished Boolean       @default(false)
  startNodeId String?
  edges       ChatbotEdge[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes       ChatbotNode[]
  indications Indication[]
}

model ChatbotNode {
  id            String        @id @default(cuid())
  flowId        String
  type          String
  content       Json
  position      Json
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  outgoingEdges ChatbotEdge[] @relation("SourceNode")
  incomingEdges ChatbotEdge[] @relation("TargetNode")
  flow          ChatbotFlow   @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId])
}

model ChatbotEdge {
  id           String      @id @default(cuid())
  flowId       String
  sourceNodeId String
  targetNodeId String
  condition    Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  flow         ChatbotFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  sourceNode   ChatbotNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode   ChatbotNode @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)

  @@index([flowId])
  @@index([sourceNodeId])
  @@index([targetNodeId])
}

model ChatbotSession {
  id            String   @id @default(cuid())
  flowId        String
  leadId        String?
  currentNodeId String?
  variables     Json?
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([flowId])
}

model Quiz {
  id               String         @id @default(cuid())
  name             String
  description      String?
  userId           String
  isPublished      Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  completionScreen Json?
  openingScreen    Json?
  indications      Indication[]
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions        QuizQuestion[]

  @@index([userId])
}

model QuizQuestion {
  id           String   @id @default(cuid())
  quizId       String
  type         String
  text         String
  required     Boolean  @default(true)
  options      String?
  variableName String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model PaymentLink {
  id            String    @id @default(cuid())
  userId        String
  planId        String
  externalId    String    @unique // ID do link na Appmax
  paymentUrl    String
  status        String    // pending, paid, refused, expired
  transactionId String?
  createdAt     DateTime  @default(now())
  paidAt        DateTime?
  
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}
