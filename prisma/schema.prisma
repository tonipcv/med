generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  name                   String
  slug                   String           @unique
  specialty              String?
  email                  String           @unique
  password               String
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime         @default(now())
  plan                   String           @default("free")
  planExpiresAt          DateTime?
  pageTemplate           String           @default("default")
  accounts               Account[]
  events                 Event[]
  indications            Indication[]
  interestOptions        InterestOption[]
  leads                  Lead[]
  patients               Patient[]
  sessions               Session[]
}

model Indication {
  id        String   @id @default(cuid())
  slug      String
  name      String?
  userId    String
  createdAt DateTime @default(now())
  fullLink  String?
  events    Event[]
  user      User     @relation(fields: [userId], references: [id])
  leads     Lead[]
}

model Lead {
  id              String      @id @default(cuid())
  name            String
  phone           String
  interest        String?
  userId          String
  indicationId    String?
  source          String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  status          String?     @default("Novo")
  potentialValue  Float?
  appointmentDate DateTime?
  medicalNotes    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  indication      Indication? @relation(fields: [indicationId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  patient         Patient?
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  indicationId String?
  type         String
  ip           String?
  userAgent    String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?
  createdAt    DateTime    @default(now())
  indication   Indication? @relation(fields: [indicationId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeadForm {
  id            String    @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String    @default("Novo")
  notes         String?
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InsideSalesLead {
  id            String   @id @default(cuid())
  name          String
  email         String
  whatsapp      String
  instagram     String?
  area          String
  employees     String
  revenue       String
  useTechnology String
  status        String   @default("new")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model InterestOption {
  id          String   @id @default(cuid())
  label       String
  value       String
  redirectUrl String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, value])
}

model Patient {
  id                String    @id @default(cuid())
  name              String
  email             String
  phone             String
  userId            String
  leadId            String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accessToken       String?
  accessTokenExpiry DateTime?
  hasPassword       Boolean   @default(false)
  password          String?
  firstAccess       Boolean   @default(true)
  hasPortalAccess   Boolean   @default(false)
  welcomeEmailSent  Boolean   @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  lead              Lead?     @relation(fields: [leadId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
}
